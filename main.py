import asyncio
import os
import re
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message

# ‚öôÔ∏è –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç Railway (—á–µ—Ä–µ–∑ Secrets)
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
OWNER_ID = int(os.getenv("OWNER_ID"))
SESSION_NAME = os.getenv("SESSION_NAME", "my_account")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SESSION_STRING = os.getenv("SESSION_STRING")  # –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞

# üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
DEFAULT_KEYWORDS = {
    "—Ä–æ–∑—ã–≥—Ä—ã—à", "–∫–æ–Ω–∫—É—Ä—Å", "giveaway", "–≤—ã–∏–≥—Ä–∞–π", "–ø–æ–¥–∞—Ä–æ–∫", "—Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º",
    "—É—á–∞—Å—Ç–∏–µ", "–ø–æ–±–µ–¥–∏—Ç–µ–ª—å", "—Ä–µ–ø–æ—Å—Ç", "–ø–æ–¥–ø–∏—Å–∫–∞", "–¥–∞—Ä–∏–º", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "–∞–∫—Ü–∏—è", "–ø—Ä–∏–∑", "–ª–æ—Ç", "–ª–æ—Ç–µ—Ä–µ—è", "–ø—Ä–æ–º–æ", "–ø—Ä–æ–º–æ–∫–æ–¥"
}

# üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —á–∞—Ç—ã (–ø–æ ID)
IGNORED_CHATS = set()

# üß© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏)
USER_KEYWORDS = set(DEFAULT_KEYWORDS)

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
if SESSION_STRING:
    app = Client(SESSION_NAME, api_id=API_ID, api_hash=API_HASH, session_string=SESSION_STRING)
else:
    app = Client(SESSION_NAME, api_id=API_ID, api_hash=API_HASH)

# üîç –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def is_giveaway(text: str) -> bool:
    if not text:
        return False
    text_lower = text.lower()
    for keyword in USER_KEYWORDS:
        if keyword in text_lower:
            return True
    return False

# üîó –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
def get_message_link(chat_id: int, message_id: int) -> str:
    try:
        chat = app.get_chat(chat_id)
        if chat.username:
            return f"https://t.me/{chat.username}/{message_id}"
        else:
            return f"tg://openmessage?chat_id={chat_id}&message_id={message_id}"
    except Exception:
        return f"tg://openmessage?chat_id={chat_id}&message_id={message_id}"

# üëÇ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@app.on_message(filters.text & filters.group)
async def monitor_chats(client: Client, message: Message):
    chat_id = message.chat.id

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —á–∞—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if chat_id in IGNORED_CHATS:
        return

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—Å—Ç –ª–∏ —ç—Ç–æ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º
    if is_giveaway(message.text or ""):
        chat_title = message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        message_link = get_message_link(chat_id, message.id)
        detected_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # üì© –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert_text = (
            f"üéÅ **–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à!**\n\n"
            f"**–ß–∞—Ç:** {chat_title} (`{chat_id}`)\n"
            f"**–î–∞—Ç–∞/–≤—Ä–µ–º—è:** {detected_time}\n"
            f"**–°—Å—ã–ª–∫–∞:** {message_link}\n\n"
            f"**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n{message.text[:1000]}"
        )

        try:
            await client.send_message(OWNER_ID, alert_text, disable_web_page_preview=True)
            print(f"[+] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ {chat_title}")
        except Exception as e:
            print(f"[-] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ‚ûï –ö–æ–º–∞–Ω–¥–∞: –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
@app.on_message(filters.command("add_keyword", prefixes=".") & filters.user(OWNER_ID))
async def add_keyword(client: Client, message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.add_keyword <—Å–ª–æ–≤–æ>`")
        return

    keyword = args[1].strip().lower()
    if keyword in USER_KEYWORDS:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ `{keyword}` —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        return

    USER_KEYWORDS.add(keyword)
    await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ `{keyword}` –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

# ‚ûñ –ö–æ–º–∞–Ω–¥–∞: —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
@app.on_message(filters.command("remove_keyword", prefixes=".") & filters.user(OWNER_ID))
async def remove_keyword(client: Client, message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.remove_keyword <—Å–ª–æ–≤–æ>`")
        return

    keyword = args[1].strip().lower()
    if keyword not in USER_KEYWORDS:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ `{keyword}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.")
        return

    USER_KEYWORDS.remove(keyword)
    await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ `{keyword}` —É–¥–∞–ª–µ–Ω–æ.")

# üìã –ö–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
@app.on_message(filters.command("list_keywords", prefixes=".") & filters.user(OWNER_ID))
async def list_keywords(client: Client, message: Message):
    keywords = "\n".join(sorted(USER_KEYWORDS))
    await message.reply(f"üìã **–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**\n```\n{keywords}\n```")

# üö´ –ö–æ–º–∞–Ω–¥–∞: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç (–ø–æ ID –∏–ª–∏ username, –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º)
@app.on_message(filters.command("ignore_chat", prefixes=".") & filters.user(OWNER_ID))
async def ignore_chat(client: Client, message: Message):
    if message.reply_to_message:
        chat_id = message.reply_to_message.chat.id
    else:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.ignore_chat <@username –∏–ª–∏ ID>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        target = args[1].strip()
        try:
            chat = await client.get_chat(target)
            chat_id = chat.id
        except Exception as e:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç: {e}")
            return

    IGNORED_CHATS.add(chat_id)
    await message.reply(f"‚úÖ –ß–∞—Ç `{chat_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç.")

# üìã –ö–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —á–∞—Ç—ã
@app.on_message(filters.command("list_ignored", prefixes=".") & filters.user(OWNER_ID))
async def list_ignored(client: Client, message: Message):
    if not IGNORED_CHATS:
        await message.reply("üìã –ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return

    ignored_list = "\n".join(map(str, IGNORED_CHATS))
    await message.reply(f"üìã **–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —á–∞—Ç—ã (ID):**\n```\n{ignored_list}\n```")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: —É–±—Ä–∞—Ç—å —á–∞—Ç –∏–∑ –∏–≥–Ω–æ—Ä–∞
@app.on_message(filters.command("unignore_chat", prefixes=".") & filters.user(OWNER_ID))
async def unignore_chat(client: Client, message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.unignore_chat <chat_id>`")
        return

    try:
        chat_id = int(args[1].strip())
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞.")
        return

    if chat_id not in IGNORED_CHATS:
        await message.reply(f"‚ö†Ô∏è –ß–∞—Ç `{chat_id}` –Ω–µ –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.")
        return

    IGNORED_CHATS.remove(chat_id)
    await message.reply(f"‚úÖ –ß–∞—Ç `{chat_id}` —É–¥–∞–ª—ë–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("üöÄ Giveaway Tracker –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        app.send_message(OWNER_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏!")
        print("[TEST] ‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"[TEST] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    app.run()  # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
